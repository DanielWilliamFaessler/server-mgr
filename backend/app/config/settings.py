"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import environ   # type: ignore[import]
from icecream import ic   # type: ignore[import]


env = environ.Env(
    # set casting, default value
    DJANGO_DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
environ.Env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# False if not in os.environ because of casting above
DEBUG = env('DJANGO_DEBUG')

ic.disable()
if DEBUG:
    ic.enable()

ALLOWED_HOSTS = env.list('DJANGO_ALLOWED_HOSTS', default=[])

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    # own apps
    'core',
    'server',
    # third party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.gitlab',
    'django_bootstrap5',
    'django_extensions',
    'debug_toolbar',
    'corsheaders',
    'user_messages',
    # worker/celery
    'django_celery_results',
    'django_celery_beat',
    'celery_progress',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'config' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    # The db() method is an alias for db_url().
    # Parse database connection url strings
    # like psql://user:pass@127.0.0.1:8458/db
    'default': env.db(
        'DJANGO_DATABASE_URL', default='sqlite:////tmp/my-tmp-sqlite.db'
    ),
}

if cache_url := env.cache_url('DJANGO_CACHE_URL', default=None):
    CACHES = {
        # The cache() method is an alias for cache_url().
        'default': cache_url,
    }

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = env.str('DJANGO_LANGUAGE_CODE', 'de-ch')

TIME_ZONE = env.str('DJANGO_TIME_ZONE', 'Europe/Zurich')
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = env.str('DJANGO_STATIC_URL', f'/api/static/')
STATIC_ROOT = env.path(
    'DJANGO_STATIC_ROOT', BASE_DIR.parent / 'tmp' / 'static'
)
MEDIA_URL = env.str('DJANGO_MEDIA_URL', f'/api/media/')
MEDIA_ROOT = env.path('DJANGO_MEDIA_ROOT', BASE_DIR.parent / 'tmp' / 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    # YOUR SETTINGS
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication'
    ],
}

# https://drf-spectacular.readthedocs.io/en/latest/settings.html
# SPECTACULAR_SETTINGS = {
#     'TITLE': 'Your Project API',
#     'DESCRIPTION': 'Your project description',
#     'VERSION': '1.0.0',
#     'SERVE_INCLUDE_SCHEMA': False,
#     # OTHER SETTINGS
# }

# https://github.com/adamchainz/django-cors-headers
CORS_ALLOWED_ORIGINS = env.list('DJANGO_CORS_ALLOWED_ORIGINS', default=[])
CORS_ALLOWED_ORIGIN_REGEXES = env.list(
    'DJANGO_ALLOWED_ORIGIN_REGEXES', default=[]
)
CORS_ALLOW_ALL_ORIGINS = env.bool(
    'DJANGO_CORS_ALLOW_ALL_ORIGINS', default=False
)
# the number of seconds a client/browser can cache the preflight response. If this is 0 (or any falsey value), no max age header will be sent. Defaults to 86400 (one day).
minute = 60
CORS_PREFLIGHT_MAX_AGE = 60 * minute
CORS_URLS_REGEX = rf'^api/.*$'
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CSRF_TRUSTED_ORIGINS = env.list('DJANGO_CSRF_TRUSTED_ORIGINS', default=[])

# CSRF_USE_SESSIONS = True
# CSRF_COOKIE_HTTPONLY = True

USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

if DEBUG:
    import socket

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[:-1] + '1' for ip in ips] + ['127.0.0.1', '10.0.2.2']

    # def show_toolbar(request):
    #     return True

    # DEBUG_TOOLBAR_CONFIG = {
    #     'SHOW_TOOLBAR_CALLBACK': show_toolbar,
    # }

# Import-export settings, see https://django-import-export.readthedocs.io/en/latest/installation.html#settings
IMPORT_EXPORT_USE_TRANSACTIONS = True

# allauth / social auth
SITE_ID = 1

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'gitlab': {
        'GITLAB_URL': 'https://gitlab.ost.ch',
        # apparently setting this doesn't change anything, it will always request api level access
        'SCOPE': [
            # 'openid',
            # 'profile',
            # 'email',
            'read_user',
            # 'api',
        ],
    },
}
# https://django-allauth.readthedocs.io/en/latest/configuration.html
ACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = False
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# EMAIL SETTINGS
EMAIL_CONFIG = env.email(
    'DJANGO_EMAIL_URL', default='smtp://user:password@localhost:25'
)
vars().update(EMAIL_CONFIG)
EMAIL_DEFAULT_FROM = env.str('DJANGO_EMAIL_DEFAULT_FROM')
ADMINS = [
    ('Dominic Klinger', 'dominic.klinger@ost.ch'),
    ('Raphael Das Gupta', 'raphael.dasgupta@ost.ch'),
    ('Nicola Jordan', 'nicola.jordan@ost.ch'),
]
EMAIL_SUBJECT_PREFIX = '[Server-Mgr] '

AUTH_USER_MODEL = 'core.User'

# CELERY Config

# Celery Configuration Options
CELERY_BROKER_URL = env.str('DJANGO_BROKER_URL')

CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
# in seconds
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# the schedule can be found in 'config/celery.py'
# CELERY_BEAT_SCHEDULE

# set this to a lower number if this should signify a possible breach
# else set this as high to allow deletion of many fields at the same time
# in the django admin
DATA_UPLOAD_MAX_NUMBER_FIELDS = env.int(
    'DATA_UPLOAD_MAX_NUMBER_FIELDS', default=12000
)

SILENCED_SYSTEM_CHECKS = [
    #  See https://django-user-messages.readthedocs.io/en/latest/: user_messages.context_processors.messages
    'admin.E404',
]

ENABLE_USER_MESSAGES_RANDOM_DEBUG = env.bool(
    'DJANGO_ENABLE_USER_MESSAGES_RANDOM_DEBUG',
    default=False,
)
