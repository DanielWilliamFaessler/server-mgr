version: "3.8"
services:

  django-db:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: a-password
      POSTGRES_USER: django
      POSTGRES_DB: app
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - django-db:/var/lib/postgresql/data

  django-cache:
    image: memcached
    entrypoint: >-
      memcached -m 64

  backend: &backend
    build:
      context: backend/
      dockerfile: ../docker/backend.dockerfile
      target: prod
    # restart 3 times when failing, then give up
    restart: on-failure:3
    # only wait for POETRY_CACHE_DIR (/app/.cache) in development.
    # this way we are waiting until the setup process has started
    # and the packages are available
    command: >-
      dockerize -wait-list "tcp://django-db:5432 file:///app/.cache/cache" -timeout 30s
      poetry run gunicorn config.wsgi --reload -b 0.0.0.0:8000
    volumes:
      - django-static-files:/files/static-storage
      - django-media-files:/files/media-storage
    environment: &env
      # override this when your user is not 1000!
      USER_ID: 1000
      DJANGO_DEBUG: "False"
      DJANGO_SECRET_KEY: django-insecure-change-me-in-production!!!!
      DJANGO_DATABASE_URL: psql://django:a-password@django-db:5432/app
      DJANGO_CACHE_URL: pymemcache://django-cache:11211
      DJANGO_STATIC_URL: /serve-files/static/
      DJANGO_STATIC_ROOT: /files/static-storage/static
      DJANGO_MEDIA_URL: /serve-files/media/
      DJANGO_MEDIA_ROOT: /files/media-storage/media
      DJANGO_ALLOWED_HOSTS: "*"
      MPLCONFIGDIR: /app/.config
      # https://django-environ.readthedocs.io/en/latest/types.html
      DJANGO_EMAIL_URL: smtp://user:password@maildev:1025
      DJANGO_EMAIL_DEFAULT_FROM: no-reply@maildev
      DJANGO_EMAIL_ADMINS: nicola.jordan@ost.ch,dominic.klinger@ost.ch
      DJANGO_BROKER_URL: 'amqp://user:pass@broker:5672/celery'
      # set in development to display (randomnly) debug user messages, default false
      ENABLE_USER_MESSAGES_RANDOM_DEBUG: false
      HCLOUD_TOKEN: set-this-to-a-real-value-when-not-testing!

  setup-backend:
    <<: *backend
    restart: on-failure
    # poetry install --no-interaction --no-ansi is needed for development only
    # since we mount the folder
    command: >-
      bash -c '
      poetry run ./manage.py migrate
      && poetry run ./manage.py collectstatic --noinput'

  worker:
    <<: *backend
    restart: on-failure
    command: 'poetry run celery -A config worker -l INFO'

  worker-beat:
    <<: *backend
    restart: on-failure
    command: 'poetry run celery -A config beat -l INFO'
    user: "root"

  broker:
    image: rabbitmq:3-management
    # https://www.rabbitmq.com/configure.html#supported-environment-variables
    environment:
      <<: *env
      DJANGO_DEBUG: false
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
      RABBITMQ_DEFAULT_VHOST: celery

  # Development only service
  maildev:
    image: djfarrelly/maildev
    command: >-
      bin/maildev 
      --base-pathname /maildev
      -w 8000
      -s 1025
      --incoming-user user
      --incoming-pass password

  # Development only service
  correct-permissions:
    <<: *backend
    entrypoint: []
    command: >-
      bash -c '
      chown -R $$USER_ID:$$USER_ID /files'

volumes:
  django-static-files: null
  django-media-files: null
  django-db: null
